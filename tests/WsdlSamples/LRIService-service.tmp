Unit LRIServiceservice;

{---------------------------------------------------------------------------
This file generated by the IndySoap WSDL -> Pascal translator

Source:   file://WsdlSamples\LRIService-service.wsdl
Date:     17/09/2013 8:26:22 AM
IndySoap: V2.00-000
---------------------------------------------------------------------------}

Interface

Uses
  IdSoapClient,
  IdSoapRpcPacket,
  IdSoapTypeRegistry;

Type

  AttributeValue = class;
  CommonUserData = class;

  ArrayOfAttributeValue = array of AttributeValue;
  ArrayOfString = array of string;

  AttributeValue = class (TIdBaseSoapableClass)
  Private
    FsoftwareVersion : string;
    FdataVersion : string;
    FlastAccessDate : string;
    FshortDescr5 : string;
    FshortDescr4 : string;
    FshortDescr3 : string;
    FshortDescr2 : string;
    FshortDescr1 : string;
    FcreatedDate : string;
  Published
    property softwareVersion : string read FsoftwareVersion write FsoftwareVersion;
    property dataVersion : string read FdataVersion write FdataVersion;
    property lastAccessDate : string read FlastAccessDate write FlastAccessDate;
    property shortDescr5 : string read FshortDescr5 write FshortDescr5;
    property shortDescr4 : string read FshortDescr4 write FshortDescr4;
    property shortDescr3 : string read FshortDescr3 write FshortDescr3;
    property shortDescr2 : string read FshortDescr2 write FshortDescr2;
    property shortDescr1 : string read FshortDescr1 write FshortDescr1;
    property createdDate : string read FcreatedDate write FcreatedDate;
  end;

  CommonUserData = class (TIdBaseSoapableClass)
  Private
    FhomepageURL : string;
    FstatisticalArea : string;
    Fprofession : string;
    FcontactOrBuyer : Integer;
    FpoBoxCity : string;
    Fphone : string;
    Ffax : string;
    Fcity : string;
    Fsalutation : string;
    FlastName : string;
    FcountrySpecific : string;
    FuserCategory : string;
    Femail : string;
    FpreferredLanguage : string;
    Fstreet : string;
    FcompanyName : string;
    FpoBoxNo : string;
    FmaritalStatus : Integer;
    Ftitle : string;
    FuserSubCategory : string;
    Fmobile : string;
    Fcomment : string;
    FpreferredContactMethod : Integer;
    FcityOfBirth : string;
    FmiddleName : string;
    FvalidAddress : Integer;
    FcountryCode : string;
    FfirstName : string;
    Fcountry : string;
    FallowMarketingFlag : Integer;
    FzipCode : string;
    FstateOfBirth : string;
    FdateOfBirth : string;
    FpoBoxZipCode : string;
    Fgender : Integer;
    FcountryOfBirth : string;
    FstreetNumber : string;
    FstoreAgreementFlag : Integer;
    Fstate : string;
  Published
    property homepageURL : string read FhomepageURL write FhomepageURL;
    property statisticalArea : string read FstatisticalArea write FstatisticalArea;
    property profession : string read Fprofession write Fprofession;
    property contactOrBuyer : Integer read FcontactOrBuyer write FcontactOrBuyer;
    property poBoxCity : string read FpoBoxCity write FpoBoxCity;
    property phone : string read Fphone write Fphone;
    property fax : string read Ffax write Ffax;
    property city : string read Fcity write Fcity;
    property salutation : string read Fsalutation write Fsalutation;
    property lastName : string read FlastName write FlastName;
    property countrySpecific : string read FcountrySpecific write FcountrySpecific;
    property userCategory : string read FuserCategory write FuserCategory;
    property email : string read Femail write Femail;
    property preferredLanguage : string read FpreferredLanguage write FpreferredLanguage;
    property street : string read Fstreet write Fstreet;
    property companyName : string read FcompanyName write FcompanyName;
    property poBoxNo : string read FpoBoxNo write FpoBoxNo;
    property maritalStatus : Integer read FmaritalStatus write FmaritalStatus;
    property title : string read Ftitle write Ftitle;
    property userSubCategory : string read FuserSubCategory write FuserSubCategory;
    property mobile : string read Fmobile write Fmobile;
    property comment : string read Fcomment write Fcomment;
    property preferredContactMethod : Integer read FpreferredContactMethod write FpreferredContactMethod;
    property cityOfBirth : string read FcityOfBirth write FcityOfBirth;
    property middleName : string read FmiddleName write FmiddleName;
    property validAddress : Integer read FvalidAddress write FvalidAddress;
    property countryCode : string read FcountryCode write FcountryCode;
    property firstName : string read FfirstName write FfirstName;
    property country : string read Fcountry write Fcountry;
    property allowMarketingFlag : Integer read FallowMarketingFlag write FallowMarketingFlag;
    property zipCode : string read FzipCode write FzipCode;
    property stateOfBirth : string read FstateOfBirth write FstateOfBirth;
    property dateOfBirth : string read FdateOfBirth write FdateOfBirth;
    property poBoxZipCode : string read FpoBoxZipCode write FpoBoxZipCode;
    property gender : Integer read Fgender write Fgender;
    property countryOfBirth : string read FcountryOfBirth write FcountryOfBirth;
    property streetNumber : string read FstreetNumber write FstreetNumber;
    property storeAgreementFlag : Integer read FstoreAgreementFlag write FstoreAgreementFlag;
    property state : string read Fstate write Fstate;
  end;


{!
  Name: type_ = type;
  Type: ArrayOfAttributeValue = in http://www.lriservice.com/schemas/LRIServiceRemoteInterface;
  Type: ArrayOfString = in http://www.lriservice.com/schemas/LRIServiceRemoteInterface;
  Type: AttributeValue = in http://www.lriservice.com/schemas/LRIServiceRemoteInterface;
  Type: CommonUserData = in http://www.lriservice.com/schemas/LRIServiceRemoteInterface;
}

type
  {Soap Address for this Interface: http://www.is.danet.de/LRInterimWeb/servlet/rpcrouter}
  ILRIService = Interface (IIdSoapInterface) ['{86E4FA13-92EA-4B17-A8AE-A4634116F9D5}']
       {!Namespace: http://www.is.danet.de/LRIService}
    function  getSpecificUserDataBlob(userName : string; accountCountryCode : string; applicationId : string; type_ : string; name : string) : TIdSoapAttachment; stdcall;
      {!Request: getSpecificUserDataBlob; }
    procedure deleteAllSpecificUserDataForApplication(userName : string; accountCountryCode : string; applicationId : string); stdcall;
      {!Request: deleteAllSpecificUserDataForApplication; }
    procedure registerUser(userName : string; passwd : string; userData : CommonUserData; accountCountryCode : string; applicationId : string); stdcall;
      {!Request: registerUser; }
    procedure authenticateUser(userName : string; passwd : string; accountCountryCode : string; anApplicationId : string); stdcall;
      {!Request: authenticateUser; }
    function  getSpecificUserData(userName : string; accountCountryCode : string; applicationId : string; type_ : string; name : string) : AttributeValue; stdcall;
      {!Request: getSpecificUserData; }
    procedure updateCommonUserData(userName : string; userData : CommonUserData; accountCountryCode : string; applicationId : string); stdcall;
      {!Request: updateCommonUserData; }
    procedure expireUser(userName : string; accountCountryCode : string); stdcall;
      {!Request: expireUser; }
    function  getDistinctAttributeNames(userName : string; accountCountryCode : string; applicationId : string; objektType : string) : ArrayOfString; stdcall;
      {!Request: getDistinctAttributeNames; }
    function  getAllSpecificUserDataOfTypeOrderByName(userName : string; accountCountryCode : string; applicationId : string; objectType : string) : ArrayOfAttributeValue; stdcall;
      {!Request: getAllSpecificUserDataOfTypeOrderByName; }
    procedure addSpecificUserData(userName : string; accountCountryCode : string; applicationId : string; type_ : string; name : string; dataVersion : string; softwareVersion : string; shortDescr1 : string; shortDescr2 : string; shortDescr3 : string; shortDescr4 : string; shortDescr5 : string; blob : TIdSoapAttachment); stdcall;
      {!Request: addSpecificUserData; }
    function  getAttributeCount(userName : string; accountCountryCode : string; applicationId : string; objektType : string) : Integer; stdcall;
      {!Request: getAttributeCount; }
    procedure logoutUser(userName : string; accountCountryCode : string); stdcall;
      {!Request: logoutUser; }
    procedure forgottenPasswdUsingTempPasswd(userName : string; accountCountryCode : string); stdcall;
      {!Request: forgottenPasswdUsingTempPasswd; }
    procedure updatePasswd(userName : string; accountCountryCode : string; newPasswd : string); stdcall;
      {!Request: updatePasswd; }
    procedure deleteSpecificUserData(userName : string; accountCountryCode : string; applicationId : string; type_ : string; name : string); stdcall;
      {!Request: deleteSpecificUserData; }
    procedure deleteAllSpecificUserData(userName : string; accountCountryCode : string); stdcall;
      {!Request: deleteAllSpecificUserData; }
    procedure deleteUser(userName : string; accountCountryCode : string); stdcall;
      {!Request: deleteUser; }
    function  getAllSpecificUserDataOfTypeOrderByDate(userName : string; accountCountryCode : string; applicationId : string; objectType : string) : ArrayOfAttributeValue; stdcall;
      {!Request: getAllSpecificUserDataOfTypeOrderByDate; }
    procedure updateNameOfSpecificAttribute(userName : string; accountCountryCode : string; applicationId : string; type_ : string; oldAttributeName : string; newAttributeName : string); stdcall;
      {!Request: updateNameOfSpecificAttribute; }
    function  getCommonUserData(userName : string; accountCountryCode : string) : CommonUserData; stdcall;
      {!Request: getCommonUserData; }
  end;

function GetILRIService(AClient : TIdSoapBaseSender; ASetUrl : Boolean = true) : ILRIService;

Implementation

Uses
  IdSoapRTTIHelpers,
  IdSoapUtilities,
  SysUtils;


function GetILRIService(AClient : TIdSoapBaseSender; ASetUrl : Boolean = true) : ILRIService;
begin
  if ASetURL and (AClient is TIdSoapWebClient) then
    begin
    (AClient as TIdSoapWebClient).SoapURL := 'http://www.is.danet.de/LRInterimWeb/servlet/rpcrouter';
    end;
  result := IdSoapD4Interface(AClient) as ILRIService;
end;

Initialization
  IdSoapRegisterType(TypeInfo(ArrayOfAttributeValue), '', TypeInfo(AttributeValue));
  IdSoapRegisterType(TypeInfo(ArrayOfString), '', TypeInfo(string));
  IdSoapRegisterType(TypeInfo(AttributeValue));
  IdSoapRegisterType(TypeInfo(CommonUserData));
End.
