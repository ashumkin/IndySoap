Unit DotNetDocLit;

{---------------------------------------------------------------------------
This file generated by the IndySoap WSDL -> Pascal translator

Source:   file://WsdlSamples/DotNetDocLit.wsdl
Date:     29/05/2013 11:36:21 AM
IndySoap: V1.00
Notes:
   * Service LookyBookService.LookyBookServiceHttpGet ignored as no SOAP Address was specified
   
   * Service LookyBookService.LookyBookServiceHttpPost ignored as no SOAP Address was specified
   
---------------------------------------------------------------------------}

Interface

Uses
  IdSoapClient,
  IdSoapRpcPacket,
  IdSoapTypeRegistry;

Type

  bookInfo = class;
  bookInfoVendorprice = class;

  bookInfoVendorpriceArray = array of bookInfoVendorprice;

  bookInfo = class (TIdBaseSoapableClass)
  Private
    Fisbn : String;
    Ftitle : String;
    Fauthor : String;
    Fpubdate : String;
    Fpublisher : String;
    FimgUrl : String;
    Ftimestamp : String;
    Fvendorprice : bookInfoVendorpriceArray;
  Public
    destructor Destroy; override;
    property vendorprice : bookInfoVendorpriceArray read Fvendorprice write Fvendorprice;
  Published
    property isbn : String read Fisbn write Fisbn;
    property title : String read Ftitle write Ftitle;
    property author : String read Fauthor write Fauthor;
    property pubdate : String read Fpubdate write Fpubdate;
    property publisher : String read Fpublisher write Fpublisher;
    property imgUrl : String read FimgUrl write FimgUrl;
    property timestamp : String read Ftimestamp write Ftimestamp;
  end;

  bookInfoVendorprice = class (TIdBaseSoapableClass)
  Private
    Fname : String;
    FsiteUrl : String;
    FpricePrefix : String;
    Fprice : String;
  Published
    property name : String read Fname write Fname;
    property siteUrl : String read FsiteUrl write FsiteUrl;
    property pricePrefix : String read FpricePrefix write FpricePrefix;
    property price : String read Fprice write Fprice;
  end;


{!
  Type: bookInfo = in http://dinoch.dyndns.org/bookService;
  Type: bookInfoVendorprice = in http://dinoch.dyndns.org/bookService;
  Type: bookInfoVendorpriceArray = in http://dinoch.dyndns.org/bookService;
}

type
  {Soap Address for this Interface: Multiple Addresses For this Interface (or Indeterminate)}
  ILookyBook = Interface (IIdSoapInterface) ['{9CBDC25B-4ACB-4445-AF1D-9A720390FE02}']
       {!Namespace: http://dinoch.dyndns.org/webservices/;
         SoapAction: http://dinoch.dyndns.org/webservices/GetInfo;
         Encoding: Document}
    function  GetInfo(ISBN : String) : bookInfo; stdcall;
      {!Request: GetInfo; }
      {&retrieves book information for a given ISBN.  Returns an XML schema containing title, author, publisher, pubdate and other info.}
  end;

function GetILookyBook(AClient : TIdSoapBaseSender) : ILookyBook;

Implementation

Uses
  IdSoapRTTIHelpers,
  IdSoapUtilities,
  SysUtils;

{ bookInfo }

destructor bookInfo.destroy;
begin
  IdSoapFreeAndNilArray(pointer(Fvendorprice), TypeInfo(bookInfoVendorpriceArray));
  inherited;
end;


function GetILookyBook(AClient : TIdSoapBaseSender) : ILookyBook;
begin
  result := IdSoapD4Interface(AClient) as ILookyBook;
end;

Initialization
  IdSoapRegisterType(TypeInfo(bookInfo));
  IdSoapRegisterProperty('bookInfo', 'vendorprice',
                   IdSoapFieldProp(@bookInfo(nil).Fvendorprice),
                   IdSoapFieldProp(@bookInfo(nil).Fvendorprice),
                   TypeInfo(bookInfoVendorpriceArray));
  IdSoapRegisterType(TypeInfo(bookInfoVendorprice));
  IdSoapRegisterType(TypeInfo(bookInfoVendorpriceArray), '', TypeInfo(bookInfoVendorprice));
End.
