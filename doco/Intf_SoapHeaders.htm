<html>
	<head>
		<Title>Soap Headers</Title>
		<style>@import url(indysoap.css); 
	</style>
	</head>
	<body>
		<H2>SOAP Headers</H2>
		<P>The SOAP specification allows for headers to be added to a message. Headers can 
			be used to provide common elements that are required for all the services 
			provided, but where it is not convenient to actually make the elements 
			parameters of the message itself.</P>
		<P>There is no clear guidance about when to use headers and when to use parameters. 
			Somce observed uses of SOAP headers:</P>
		<UL>
			<LI>
				Carrying session information</LI>
			<LI>
				Communicating with SOAP intermediaries</LI>
			<LI>
				carrying client configuration information semt with every request&nbsp;(i.e. M$ 
				MapPoint)</LI></UL>
		<H3>Specifying Message Headers</H3>
		<P>Headers are handled as SOAP metadata on a particular method. If a 
			method&nbsp;carries a particular header, then this needs to be declared:</P>
		<PRE>&nbsp; {!header: name = type}</PRE>
		<P>Each header is given a name and a type, which must be a valid pascal&nbsp;class. 
			Both the name and the type are subject to any renaming defined in the SOAP 
			metadata for the method or the interface.
		</P>
		<P>If your header content has a simple type, such as string or integer, then you 
			must use an IndySoap TIdSoapSimpleClass descendent.</P>
		<P>The type must be a type that is registered with IndySoap.</P>
		<P>The header above is a request header - a header that will be sent when the 
			request is made by the client.</P>
		<P>To specify a header that is returned by the server in the response, use the 
			declaration:</P>
		<PRE>&nbsp; {!respheader: name = type}</PRE>
		<P>A method may carry a header and an outheader of the same name, as request and 
			response headers never meet each other in the application</P>
		<P>You must declare the header for each method that may carry the header. This is a 
			bit tiresome, but it's how SOAP works.
		</P>
		<P>There is no infrastructural support for making headers required. If you have 
			headers that are required, you will have to implement your own application 
			logic to handle this.</P>
		<P>Message headers declared in this fashion will only work with doc|lit interfaces.
		</P>
		<P>Message headers declared in this fashion will be declared properly in WSDL 
			interfaces generated by the system.</P>
		<P>&nbsp;</P>
		<H3>How headers work on the client</H3>
		<P>IndySoap clients have the following 2 properties:</P>
		<P>property SendHeaders : <A href="TidSoapHeaderList.htm">TIdSoapHeaderList</A>;
			<BR>
			property RecvHeaders : <A href="TidSoapHeaderList.htm">TIdSoapHeaderList</A>;
		</P>
		<P>The SendHeaders list allows the client to control what headers will be sent with 
			the next request. A client will examine this list when making a request, and 
			send</P>
		<UL>
			<LI>
				any declared headers for this method</LI>
			<LI>
				any headers that have MustSend = true</LI></UL>
		<P>When a response is received, the client will place all the headers from the 
			message in the RecvHeaders list. Where the header&nbsp;declared, it will be 
			converted to it's proper pascal representation. Where the header is not 
			declared, a simple text representation will be generated as a TIdSoapString.
		</P>
		<P>Each time a request is made, any headers in the SendHeaders list that are not 
			labelled persistent = true will be cleared. RecvHeaders is cleared each time a 
			request is made.
		</P>
		<P>&nbsp;</P>
		<H3>How headers work on the server</H3>
		<P>&nbsp;</P>
		<P>The headers sent in a request are available at 
			GIdSoapRequestInfo.Reader.Headers. If the headers are declared headers, then 
			the type of the object associated with the header will be as declared, 
			otherwise it will be a TIdSoapString containing the contents of the header.</P>
		<P>To create headers to go in the response message, add them to the 
			GIdSoapRequestInfo.Writer.Headers list. All headers in this list will be 
			returned when the response message is built.
		</P>
		<P>You can access the list of headers declared for the method through the lists at 
			GIdSoapRequestInfo.Method.Headers and GIdSoapRequestInfo.Method.ResponseHeaders</P>
		<P>&nbsp;</P>
	</body>
</html>
